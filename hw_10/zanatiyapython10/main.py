import streamlit as st
import pandas as pd
from model_utils import load_model

st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    page_icon="üèôÔ∏è",
    layout="centered"
)

@st.cache_resource
def load_cached_model():
    return load_model()

@st.cache_data
def load_data():
    df = pd.read_csv("realty_data.csv")
    df['rooms'] = df['rooms'].fillna(df['rooms'].median())
    df['city'] = df['city'].fillna('‚Äî')
    df['district'] = df['district'].fillna('‚Äî')
    df['lat'] = df['lat'].fillna(df['lat'].mean())
    df['lon'] = df['lon'].fillna(df['lon'].mean())
    return df

def run_app(regressor, data_df):
    st.title("üè† –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

    city_options = ['‚Äî'] + sorted(data_df['city'].dropna().unique().tolist())
    selected_city = st.selectbox('–ì–æ—Ä–æ–¥', city_options)

    selected_district = '‚Äî'
    if selected_city != '‚Äî':
        filtered_df = data_df[data_df['city'] == selected_city]
        available_districts = filtered_df['district'].dropna().unique().tolist()

        if available_districts:
            district_options = ['‚Äî'] + sorted(available_districts)
            selected_district = st.selectbox('–†–∞–π–æ–Ω', district_options)
        else:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ä–∞–π–æ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞.")

    total_square = st.number_input('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)', min_value=10.0, max_value=500.0, step=1.0)
    rooms = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', min_value=1, max_value=10, step=1)
    floor = st.number_input('–≠—Ç–∞–∂', min_value=1, max_value=50, step=1)

    if selected_city != '‚Äî':
        coord_df = data_df[data_df['city'] == selected_city]
        if selected_district != '‚Äî':
            coord_df = coord_df[coord_df['district'] == selected_district]

        lat = coord_df['lat'].mean()
        lon = coord_df['lon'].mean()
    else:
        lat = data_df['lat'].mean()
        lon = data_df['lon'].mean()

    if selected_city != '‚Äî':
        input_df = pd.DataFrame({
            'total_square': [total_square],
            'rooms': [rooms],
            'floor': [floor],
            'lat': [lat],
            'lon': [lon],
            'city': [selected_city],
            'district': [selected_district]
        })

        if st.button('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å'):
            prediction = regressor.predict(input_df)
            st.success(f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: {prediction[0]:,.2f} —Ä—É–±.")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")

model = load_cached_model()
data = load_data()
run_app(model, data)